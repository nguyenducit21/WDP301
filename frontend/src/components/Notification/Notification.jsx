import React, { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import './Notification.css';

const Notification = () => {
    const [notifications, setNotifications] = useState([]);
    const [socket, setSocket] = useState(null);
    const [isConnected, setIsConnected] = useState(false);

    useEffect(() => {
        // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o t·ª´ browser
        if ('Notification' in window && Notification.permission === 'default') {
            Notification.requestPermission();
        }

        // K·∫øt n·ªëi WebSocket
        const newSocket = io('http://localhost:3000');
        setSocket(newSocket);

        newSocket.on('connect', () => {
            console.log('Connected to WebSocket server');
            setIsConnected(true);

            // Join waiter room
            newSocket.emit('join-waiter-room');
        });

        newSocket.on('disconnect', () => {
            console.log('Disconnected from WebSocket server');
            setIsConnected(false);
        });

        // L·∫Øng nghe th√¥ng b√°o reservation m·ªõi
        newSocket.on('new_reservation', (data) => {
            console.log('Received new reservation notification:', data);

            const newNotification = {
                id: Date.now(),
                type: 'new_reservation',
                title: 'üÜï ƒê·∫∑t b√†n m·ªõi',
                message: `Kh√°ch h√†ng ${data.reservation.customer_name} v·ª´a ƒë·∫∑t b√†n`,
                data: data.reservation,
                timestamp: new Date(),
                read: false
            };

            setNotifications(prev => [newNotification, ...prev]);

            // Hi·ªÉn th·ªã toast notification
            if ('Notification' in window && Notification.permission === 'granted') {
                new Notification('ƒê·∫∑t b√†n m·ªõi', {
                    body: `Kh√°ch h√†ng ${data.reservation.customer_name} v·ª´a ƒë·∫∑t b√†n ${data.reservation.tables}`,
                    icon: '/favicon.ico'
                });
            }
        });

        // Cleanup
        return () => {
            newSocket.close();
        };
    }, []);

    const markAsRead = (notificationId) => {
        setNotifications(prev =>
            prev.map(notif =>
                notif.id === notificationId
                    ? { ...notif, read: true }
                    : notif
            )
        );
    };

    const removeNotification = (notificationId) => {
        setNotifications(prev =>
            prev.filter(notif => notif.id !== notificationId)
        );
    };

    const formatDateTime = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleString('vi-VN', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    const unreadCount = notifications.filter(n => !n.read).length;

    return (
        <div className="notification-container">
            {/* Notification Bell */}
            <div className="notification-bell">
                <div className="bell-icon" onClick={() => setNotifications(prev => prev.map(n => ({ ...n, read: true })))}>
                    üîî
                    {unreadCount > 0 && (
                        <span className="notification-badge">{unreadCount}</span>
                    )}
                </div>

                {/* Connection Status */}
                <div className={`connection-status ${isConnected ? 'connected' : 'disconnected'}`}>
                    {isConnected ? 'üü¢' : 'üî¥'}
                </div>
            </div>

            {/* Notification Panel */}
            {notifications.length > 0 && (
                <div className="notification-panel">
                    <div className="notification-header">
                        <h3>Th√¥ng b√°o ({unreadCount} m·ªõi)</h3>
                        <button
                            className="clear-all-btn"
                            onClick={() => setNotifications([])}
                        >
                            X√≥a t·∫•t c·∫£
                        </button>
                    </div>

                    <div className="notification-list">
                        {notifications.map(notification => (
                            <div
                                key={notification.id}
                                className={`notification-item ${notification.read ? 'read' : 'unread'}`}
                                onClick={() => markAsRead(notification.id)}
                            >
                                <div className="notification-content">
                                    <div className="notification-title">
                                        {notification.title}
                                    </div>
                                    <div className="notification-message">
                                        {notification.message}
                                    </div>
                                    {notification.data && (
                                        <div className="notification-details">
                                            <p><strong>B√†n:</strong> {notification.data.tables}</p>
                                            <p><strong>S·ªë kh√°ch:</strong> {notification.data.guest_count}</p>
                                            <p><strong>Th·ªùi gian:</strong> {notification.data.slot_time}</p>
                                            <p><strong>Ng√†y:</strong> {formatDateTime(notification.data.date)}</p>
                                            {notification.data.pre_order_items && notification.data.pre_order_items.length > 0 && (
                                                <p><strong>ƒê·∫∑t tr∆∞·ªõc:</strong> {notification.data.pre_order_items.length} m√≥n</p>
                                            )}
                                        </div>
                                    )}
                                    <div className="notification-time">
                                        {formatDateTime(notification.timestamp)}
                                    </div>
                                </div>

                                <button
                                    className="remove-btn"
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        removeNotification(notification.id);
                                    }}
                                >
                                    ‚úï
                                </button>
                            </div>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
};

export default Notification;
