import React, { useState, useEffect } from 'react';
import customFetch from '../../../utils/axios.customize';
import './PaymentModal.css';

const PaymentModal = ({
    isOpen,
    onClose,
    reservationId,
    totalAmount,
    orderInfo
}) => {
    const [paymentStatus, setPaymentStatus] = useState('pending'); // pending, checking, success, failed
    const [timeLeft, setTimeLeft] = useState(300); // 5 minutes countdown
    const [checkingPayment, setCheckingPayment] = useState(false);

    // Countdown timer
    useEffect(() => {
        if (!isOpen || paymentStatus !== 'pending') return;

        const timer = setInterval(() => {
            setTimeLeft(prev => {
                if (prev <= 1) {
                    setPaymentStatus('failed');
                    return 0;
                }
                return prev - 1;
            });
        }, 1000);

        return () => clearInterval(timer);
    }, [isOpen, paymentStatus]);

    // Auto check payment status (simulate payment checking)
    useEffect(() => {
        if (!isOpen || paymentStatus !== 'pending') return;

        const checkPayment = async () => {
            setCheckingPayment(true);
            try {
                // Simulate payment check API call
                await new Promise(resolve => setTimeout(resolve, 2000));

                // Simulate random payment success (70% success rate for demo)
                const isSuccess = Math.random() > 0.3;

                if (isSuccess) {
                    // Update reservation payment status
                    await customFetch.put(`/reservations/${reservationId}`, {
                        payment_status: 'paid',
                        paid_at: new Date().toISOString()
                    });

                    setPaymentStatus('success');
                }
            } catch (error) {
                console.error('Payment check error:', error);
            } finally {
                setCheckingPayment(false);
            }
        };

        // Check payment every 5 seconds
        const checkInterval = setInterval(checkPayment, 5000);

        // Initial check after 3 seconds
        setTimeout(checkPayment, 3000);

        return () => clearInterval(checkInterval);
    }, [isOpen, paymentStatus, reservationId]);

    // Format time display
    const formatTime = (seconds) => {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    };

    // Handle manual payment check
    const handleCheckPayment = async () => {
        setCheckingPayment(true);
        try {
            // Simulate manual payment check
            await new Promise(resolve => setTimeout(resolve, 1500));

            // Higher success rate for manual check (90%)
            const isSuccess = Math.random() > 0.1;

            if (isSuccess) {
                await customFetch.put(`/reservations/${reservationId}`, {
                    payment_status: 'paid',
                    paid_at: new Date().toISOString()
                });
                setPaymentStatus('success');
            } else {
                alert('Ch∆∞a nh·∫≠n ƒë∆∞·ª£c thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i sau!');
            }
        } catch (error) {
            console.error('Manual payment check error:', error);
            alert('L·ªói khi ki·ªÉm tra thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i!');
        } finally {
            setCheckingPayment(false);
        }
    };

    // Handle close modal
    const handleClose = () => {
        if (paymentStatus === 'success') {
            onClose(true); // Pass true to indicate successful payment
        } else {
            onClose(false);
        }
    };

    if (!isOpen) return null;

    return (
        <div className="payment-modal-overlay">
            <div className="payment-modal">
                {paymentStatus === 'pending' && (
                    <>
                        <div className="payment-modal-header">
                            <h3>üí≥ Thanh to√°n ƒë∆°n h√†ng</h3>
                            <div className="payment-timer">
                                Th·ªùi gian c√≤n l·∫°i: <span className="timer">{formatTime(timeLeft)}</span>
                            </div>
                        </div>

                        <div className="payment-modal-content">
                            <div className="payment-info">
                                <div className="amount-display">
                                    <span className="amount-label">T·ªïng ti·ªÅn:</span>
                                    <span className="amount-value">{totalAmount.toLocaleString()}ƒë</span>
                                </div>
                                <div className="order-info">
                                    <p>{orderInfo}</p>
                                </div>
                            </div>

                            <div className="qr-code-section">
                                <div className="qr-code-placeholder">
                                    <div className="qr-code">
                                        {/* Placeholder QR Code - in real app, generate actual QR */}
                                        <div className="qr-pattern">
                                            <div className="qr-corner qr-top-left"></div>
                                            <div className="qr-corner qr-top-right"></div>
                                            <div className="qr-corner qr-bottom-left"></div>
                                            <div className="qr-data">
                                                <div className="qr-line"></div>
                                                <div className="qr-line"></div>
                                                <div className="qr-line"></div>
                                                <div className="qr-line"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <p className="qr-instruction">
                                        Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng ng√¢n h√†ng<br />
                                        ho·∫∑c v√≠ ƒëi·ªán t·ª≠ ƒë·ªÉ thanh to√°n
                                    </p>
                                </div>

                                <div className="payment-methods">
                                    <div className="method-item">
                                        <span className="method-icon">üè¶</span>
                                        <span>Chuy·ªÉn kho·∫£n ng√¢n h√†ng</span>
                                    </div>
                                    <div className="method-item">
                                        <span className="method-icon">üì±</span>
                                        <span>V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay)</span>
                                    </div>
                                </div>
                            </div>

                            <div className="payment-status">
                                {checkingPayment ? (
                                    <div className="checking-payment">
                                        <div className="loading-spinner"></div>
                                        <span>ƒêang ki·ªÉm tra thanh to√°n...</span>
                                    </div>
                                ) : (
                                    <div className="payment-note">
                                        <span>üí° H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông x√°c nh·∫≠n khi nh·∫≠n ƒë∆∞·ª£c thanh to√°n</span>
                                    </div>
                                )}
                            </div>
                        </div>

                        <div className="payment-modal-footer">
                            <button
                                className="cancel-payment-btn"
                                onClick={handleClose}
                                disabled={checkingPayment}
                            >
                                H·ªßy thanh to√°n
                            </button>
                            <button
                                className="check-payment-btn"
                                onClick={handleCheckPayment}
                                disabled={checkingPayment}
                            >
                                {checkingPayment ? 'ƒêang ki·ªÉm tra...' : 'Ki·ªÉm tra thanh to√°n'}
                            </button>
                        </div>
                    </>
                )}

                {paymentStatus === 'success' && (
                    <div className="payment-success">
                        <div className="success-icon">‚úÖ</div>
                        <h3>Thanh to√°n th√†nh c√¥ng!</h3>
                        <p>ƒê∆°n ƒë·∫∑t b√†n v√† m√≥n ƒÉn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.</p>
                        <p className="success-note">
                            Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n ƒë·ªÉ x√°c nh·∫≠n chi ti·∫øt.
                        </p>
                        <button className="success-btn" onClick={handleClose}>
                            Ho√†n t·∫•t
                        </button>
                    </div>
                )}

                {paymentStatus === 'failed' && (
                    <div className="payment-failed">
                        <div className="failed-icon">‚ùå</div>
                        <h3>Thanh to√°n th·∫•t b·∫°i</h3>
                        <p>ƒê√£ h·∫øt th·ªùi gian thanh to√°n ho·∫∑c c√≥ l·ªói x·∫£y ra.</p>
                        <p className="failed-note">
                            B·∫°n c√≥ th·ªÉ li√™n h·ªá tr·ª±c ti·∫øp v·ªõi nh√† h√†ng ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.
                        </p>
                        <div className="failed-actions">
                            <button className="retry-btn" onClick={() => {
                                setPaymentStatus('pending');
                                setTimeLeft(300);
                            }}>
                                Th·ª≠ l·∫°i
                            </button>
                            <button className="contact-btn" onClick={handleClose}>
                                Li√™n h·ªá nh√† h√†ng
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default PaymentModal; 