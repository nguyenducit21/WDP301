// pages/Chef/Inventory/EditInventoryModal.jsx - C√ì TH√äM STORAGETYPE
import React, { useState, useEffect } from 'react';
import './Modal.css';

const EditInventoryModal = ({ isOpen, onClose, onSubmit, inventory }) => {
  const [formData, setFormData] = useState({
    name: '',
    unit: '',
    costperunit: '',
    supplier: '',
    minstocklevel: '',
    storageType: 'perishable' // ‚úÖ TH√äM STORAGETYPE
  });

  const units = ['kg', 'g', 'l√≠t', 'ml', 'c√°i', 'g√≥i', 'lon', 'h·ªôp', 'th√πng'];
  
  // ‚úÖ TH√äM DANH S√ÅCH LO·∫†I B·∫¢O QU·∫¢N
  const storageTypes = [
    { value: 'perishable', label: 'ü•¨ T∆∞∆°i s·ªëng (2 ng√†y)', description: 'Rau c·ªß t∆∞∆°i, b√°nh ph·ªü, th·ª±c ph·∫©m d·ªÖ h·ªèng' },
    { value: 'semi_perishable', label: 'ü•© B√°n t∆∞∆°i (4 ng√†y)', description: 'Th·ªãt, c√°, h·∫£i s·∫£n t∆∞∆°i' },
    { value: 'dry', label: 'üåæ Kh√¥/ƒë√¥ng l·∫°nh (7 ng√†y)', description: 'Gia v·ªã, ng≈© c·ªëc, ƒë·ªì kh√¥, ƒë√¥ng l·∫°nh' }
  ];

  useEffect(() => {
    if (inventory) {
      setFormData({
        name: inventory.name,
        unit: inventory.unit,
        costperunit: inventory.costperunit.toString(),
        supplier: inventory.supplier,
        minstocklevel: inventory.minstocklevel.toString(),
        storageType: inventory.storageType || 'perishable' // ‚úÖ TH√äM STORAGETYPE V·ªöI FALLBACK
      });
    }
  }, [inventory]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!formData.name || !formData.unit || !formData.costperunit || !formData.supplier || !formData.storageType) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
      return;
    }

    const submitData = {
      name: formData.name,
      unit: formData.unit,
      costperunit: parseFloat(formData.costperunit),
      supplier: formData.supplier,
      minstocklevel: parseInt(formData.minstocklevel),
      storageType: formData.storageType // ‚úÖ TH√äM STORAGETYPE
    };

    onSubmit(submitData);
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>Ch·ªânh S·ª≠a Nguy√™n Li·ªáu</h3>
          <button className="close-btn" onClick={onClose}>√ó</button>
        </div>
        
        <form onSubmit={handleSubmit} className="modal-body">
          <div className="info-note">
            <p><strong>L∆∞u √Ω:</strong> Kh√¥ng th·ªÉ s·ª≠a s·ªë l∆∞·ª£ng t·ªìn kho tr·ª±c ti·∫øp. 
            ƒê·ªÉ thay ƒë·ªïi s·ªë l∆∞·ª£ng, s·ª≠ d·ª•ng ch·ª©c nƒÉng "Nh·∫≠p h√†ng" ho·∫∑c "Ki·ªÉm kho".</p>
          </div>

          <div className="form-group">
            <label>T√™n nguy√™n li·ªáu *</label>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="Nh·∫≠p t√™n nguy√™n li·ªáu"
              required
            />
          </div>

          {/* ‚úÖ TH√äM TR∆Ø·ªúNG LO·∫†I B·∫¢O QU·∫¢N */}
          <div className="form-group">
            <label>Lo·∫°i b·∫£o qu·∫£n *</label>
            <select
              name="storageType"
              value={formData.storageType}
              onChange={handleChange}
              required
              className="storage-type-select"
            >
              {storageTypes.map(type => (
                <option key={type.value} value={type.value}>
                  {type.label}
                </option>
              ))}
            </select>
            <small className="storage-description">
              {storageTypes.find(t => t.value === formData.storageType)?.description}
            </small>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>ƒê∆°n v·ªã *</label>
              <select
                name="unit"
                value={formData.unit}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn ƒë∆°n v·ªã</option>
                {units.map(unit => (
                  <option key={unit} value={unit}>{unit}</option>
                ))}
              </select>
            </div>

            <div className="form-group">
              <label>Gi√°/ƒê∆°n v·ªã (VND) *</label>
              <input
                type="number"
                name="costperunit"
                value={formData.costperunit}
                onChange={handleChange}
                placeholder="Nh·∫≠p gi√°"
                min="0"
                step="0.01"
                required
              />
            </div>
          </div>

          <div className="form-group">
            <label>Nh√† cung c·∫•p *</label>
            <input
              type="text"
              name="supplier"
              value={formData.supplier}
              onChange={handleChange}
              placeholder="T√™n nh√† cung c·∫•p"
              required
            />
          </div>

          <div className="form-group">
            <label>M·ª©c t·ªëi thi·ªÉu (c·∫ßn mua khi d∆∞·ªõi m·ª©c n√†y)</label>
            <input
              type="number"
              name="minstocklevel"
              value={formData.minstocklevel}
              onChange={handleChange}
              placeholder="10"
              min="0"
            />
            <small>Khi s·ªë l∆∞·ª£ng t·ªìn kho d∆∞·ªõi m·ª©c n√†y, h·ªá th·ªëng s·∫Ω c·∫£nh b√°o c·∫ßn mua th√™m.</small>
          </div>

          <div className="current-stock-info">
            <p><strong>S·ªë l∆∞·ª£ng hi·ªán t·∫°i:</strong> {inventory?.currentstock} {inventory?.unit}</p>
            <p><strong>Lo·∫°i b·∫£o qu·∫£n hi·ªán t·∫°i:</strong> {storageTypes.find(t => t.value === inventory?.storageType)?.label || 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
          </div>

          <div className="modal-footer">
            <button type="button" className="btn btn-secondary" onClick={onClose}>
              H·ªßy
            </button>
            <button type="submit" className="btn btn-primary">
              C·∫≠p Nh·∫≠t
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditInventoryModal;
