// pages/Chef/Inventory/AddInventoryModal.jsx - C√ì TH√äM STORAGETYPE
import React, { useState } from 'react';
import './Modal.css';

const AddInventoryModal = ({ isOpen, onClose, onSubmit }) => {
  const [formData, setFormData] = useState({
    name: '',
    unit: '',
    supplier: '',
    minstocklevel: '10',
    storageType: 'perishable' // ‚úÖ TH√äM STORAGETYPE M·∫∂C ƒê·ªäNH
  });

  const units = ['kg', 'g', 'l√≠t', 'ml', 'c√°i', 'g√≥i', 'lon', 'h·ªôp', 'th√πng'];
  
  // ‚úÖ TH√äM DANH S√ÅCH LO·∫†I B·∫¢O QU·∫¢N
  const storageTypes = [
    { value: 'perishable', label: 'ü•¨ T∆∞∆°i s·ªëng (2 ng√†y)', description: 'Rau c·ªß t∆∞∆°i, b√°nh ph·ªü, th·ª±c ph·∫©m d·ªÖ h·ªèng' },
    { value: 'semi_perishable', label: 'ü•© B√°n t∆∞∆°i (4 ng√†y)', description: 'Th·ªãt, c√°, h·∫£i s·∫£n t∆∞∆°i' },
    { value: 'dry', label: 'üåæ Kh√¥/ƒë√¥ng l·∫°nh (7 ng√†y)', description: 'Gia v·ªã, ng≈© c·ªëc, ƒë·ªì kh√¥, ƒë√¥ng l·∫°nh' }
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!formData.name || !formData.unit || !formData.supplier || !formData.storageType) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
      return;
    }

    const submitData = {
      name: formData.name.trim(),
      unit: formData.unit,
      supplier: formData.supplier.trim(),
      minstocklevel: parseInt(formData.minstocklevel) || 10,
      storageType: formData.storageType, // ‚úÖ TH√äM STORAGETYPE
      costperunit: 0,
      currentstock: 0
    };

    onSubmit(submitData);
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h3>Th√™m Nguy√™n Li·ªáu M·ªõi</h3>
          <button className="close-btn" onClick={onClose}>√ó</button>
        </div>
        
        <form onSubmit={handleSubmit} className="modal-body">
          <div className="info-note">
            <p><strong>L∆∞u √Ω:</strong> Nguy√™n li·ªáu m·ªõi s·∫Ω c√≥ s·ªë l∆∞·ª£ng = 0 v√† gi√° = 0. 
            Gi√° v√† s·ªë l∆∞·ª£ng s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi b·∫°n nh·∫≠p h√†ng l·∫ßn ƒë·∫ßu ti√™n.</p>
          </div>

          <div className="form-group">
            <label>T√™n nguy√™n li·ªáu *</label>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="Nh·∫≠p t√™n nguy√™n li·ªáu"
              required
            />
          </div>

          {/* ‚úÖ TH√äM TR∆Ø·ªúNG LO·∫†I B·∫¢O QU·∫¢N */}
          <div className="form-group">
            <label>Lo·∫°i b·∫£o qu·∫£n *</label>
            <select
              name="storageType"
              value={formData.storageType}
              onChange={handleChange}
              required
              className="storage-type-select"
            >
              {storageTypes.map(type => (
                <option key={type.value} value={type.value}>
                  {type.label}
                </option>
              ))}
            </select>
            <small className="storage-description">
              {storageTypes.find(t => t.value === formData.storageType)?.description}
            </small>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>ƒê∆°n v·ªã *</label>
              <select
                name="unit"
                value={formData.unit}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn ƒë∆°n v·ªã</option>
                {units.map(unit => (
                  <option key={unit} value={unit}>{unit}</option>
                ))}
              </select>
            </div>

            <div className="form-group">
              <label>M·ª©c t·ªëi thi·ªÉu</label>
              <input
                type="number"
                name="minstocklevel"
                value={formData.minstocklevel}
                onChange={handleChange}
                placeholder="10"
                min="0"
              />
              <small>C·∫£nh b√°o khi s·ªë l∆∞·ª£ng d∆∞·ªõi m·ª©c n√†y</small>
            </div>
          </div>

          <div className="form-group">
            <label>Nh√† cung c·∫•p m·∫∑c ƒë·ªãnh *</label>
            <input
              type="text"
              name="supplier"
              value={formData.supplier}
              onChange={handleChange}
              placeholder="T√™n nh√† cung c·∫•p"
              required
            />
            <small>C√≥ th·ªÉ thay ƒë·ªïi khi nh·∫≠p h√†ng</small>
          </div>

          <div className="modal-footer">
            <button type="button" className="btn btn-secondary" onClick={onClose}>
              H·ªßy
            </button>
            <button type="submit" className="btn btn-primary">
              Th√™m Nguy√™n Li·ªáu
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddInventoryModal;
