const mongoose = require('mongoose');
const Role = require('../models/role.model');
require('dotenv').config();

// K·∫øt n·ªëi database
mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('MongoDB connection error:', err));

const rolesData = [
    {
        name: 'admin',
        description: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng',
        is_system_role: true,
        status: 'active'
    },
    {
        name: 'manager',
        description: 'Qu·∫£n l√Ω nh√† h√†ng',
        is_system_role: true,
        status: 'active'
    },
    {
        name: 'kitchen_staff',
        description: 'Nh√¢n vi√™n b·∫øp',
        is_system_role: false,
        status: 'active'
    },
    {
        name: 'waiter',
        description: 'Nh√¢n vi√™n ph·ª•c v·ª•',
        is_system_role: false,
        status: 'active'
    },
    {
        name: 'warehouse_staff',
        description: 'Nh√¢n vi√™n kho',
        is_system_role: false,
        status: 'active'
    },
    {
        name: 'customer',
        description: 'Kh√°ch h√†ng',
        is_system_role: true,
        status: 'active'
    }
];

const seedRoles = async () => {
    try {
        console.log('üå± B·∫Øt ƒë·∫ßu seed roles...\n');
        
        for (const roleData of rolesData) {
            // Ki·ªÉm tra xem role ƒë√£ t·ªìn t·∫°i ch∆∞a
            const existingRole = await Role.findOne({ name: roleData.name });
            
            if (existingRole) {
                console.log(`‚ö†Ô∏è  Role "${roleData.name}" ƒë√£ t·ªìn t·∫°i, b·ªè qua...`);
                
                // C·∫≠p nh·∫≠t description v√† status n·∫øu c·∫ßn
                if (!existingRole.description || !existingRole.status) {
                    await Role.findByIdAndUpdate(existingRole._id, {
                        description: roleData.description,
                        status: roleData.status,
                        updated_at: new Date()
                    });
                    console.log(`   ‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin cho role "${roleData.name}"`);
                }
            } else {
                // T·∫°o role m·ªõi
                const newRole = new Role(roleData);
                await newRole.save();
                console.log(`‚úÖ ƒê√£ t·∫°o role "${roleData.name}"`);
            }
        }
        
        console.log('\nüéâ Ho√†n th√†nh seed roles!');
        
        // Hi·ªÉn th·ªã t·∫•t c·∫£ roles
        const allRoles = await Role.find().sort({ name: 1 });
        console.log(`\nüìä T·ªïng s·ªë roles: ${allRoles.length}`);
        allRoles.forEach(role => {
            console.log(`   - ${role.name}: ${role.description} (${role.status})`);
        });
        
    } catch (error) {
        console.error('‚ùå L·ªói khi seed roles:', error);
    } finally {
        mongoose.connection.close();
    }
};

seedRoles();
