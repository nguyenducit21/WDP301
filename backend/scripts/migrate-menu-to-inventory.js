// scripts/migrate-menu-to-inventory.js
require('dotenv').config(); // Load environment variables
const mongoose = require('mongoose');
const MenuItem = require('../models/menuItems.model');
const Inventory = require('../models/inventory.model');
const MenuItemRecipe = require('../models/menuItemRecipe.model');

// K·∫øt n·ªëi MongoDB Atlas t·ª´ .env
const MONGODB_URI = process.env.MONGODB_URI;

const connectDB = async () => {
    try {
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ K·∫øt n·ªëi MongoDB Atlas th√†nh c√¥ng');
        console.log('üìç Database:', mongoose.connection.name);
    } catch (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB Atlas:', error);
        process.exit(1);
    }
};

async function migrateData() {
    await connectDB();
    
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu migration tr√™n MongoDB Atlas...');
        
        // Ki·ªÉm tra collections hi·ªán t·∫°i
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log('üìã Collections hi·ªán c√≥:', collections.map(c => c.name));
        
        // L·∫•y t·∫•t c·∫£ menu items
        const menuItems = await MenuItem.find({});
        console.log(`üçΩÔ∏è  T√¨m th·∫•y ${menuItems.length} m√≥n ƒÉn trong database RMS`);
        
        if (menuItems.length === 0) {
            console.log('‚ö†Ô∏è  Kh√¥ng c√≥ menu items n√†o. Ki·ªÉm tra l·∫°i collection name.');
            console.log('üí° C√≥ th·ªÉ collection name l√† "menuitems" thay v√¨ "menuItems"');
            
            // Th·ª≠ t√¨m v·ªõi collection name kh√°c
            const db = mongoose.connection.db;
            const allCollections = await db.listCollections().toArray();
            console.log('üìã T·∫•t c·∫£ collections:', allCollections.map(c => c.name));
            
            await mongoose.connection.close();
            return;
        }
        
        let inventoryCreated = 0;
        let recipeCreated = 0;
        let errors = 0;
        
        for (const menuItem of menuItems) {
            console.log(`\nüçΩÔ∏è  X·ª≠ l√Ω m√≥n: ${menuItem.name}`);
            
            if (menuItem.ingredients && menuItem.ingredients.length > 0) {
                console.log(`üìù Nguy√™n li·ªáu: ${menuItem.ingredients.join(', ')}`);
                
                for (const ingredientName of menuItem.ingredients) {
                    try {
                        const result = await processIngredient(ingredientName, menuItem);
                        if (result.inventoryCreated) inventoryCreated++;
                        if (result.recipeCreated) recipeCreated++;
                    } catch (error) {
                        console.error(`‚ùå L·ªói x·ª≠ l√Ω ${ingredientName}:`, error.message);
                        errors++;
                    }
                }
            } else {
                console.log('‚ö†Ô∏è  M√≥n n√†y kh√¥ng c√≥ nguy√™n li·ªáu');
            }
        }
        
        console.log('\nüéâ Migration ho√†n th√†nh!');
        console.log(`üì¶ T·∫°o ${inventoryCreated} inventory records`);
        console.log(`üìã T·∫°o ${recipeCreated} recipe records`);
        console.log(`‚ùå ${errors} l·ªói`);
        
        // C·∫≠p nh·∫≠t cost cho menu items
        await updateMenuItemCosts();
        
    } catch (error) {
        console.error('‚ùå Migration th·∫•t b·∫°i:', error);
    } finally {
        await mongoose.connection.close();
        console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
        process.exit(0);
    }
}

async function processIngredient(ingredientName, menuItem) {
    let inventoryCreated = false;
    let recipeCreated = false;
    
    try {
        // 1. Ki·ªÉm tra xem ingredient ƒë√£ t·ªìn t·∫°i ch∆∞a
        let inventory = await Inventory.findOne({ 
            name: { $regex: new RegExp(`^${ingredientName.trim()}$`, 'i') } 
        });
        
        if (!inventory) {
            // 2. T·∫°o inventory record m·ªõi
            inventory = new Inventory({
                name: ingredientName.trim(),
                category: mapCategory(ingredientName),
                unit: mapUnit(ingredientName),
                cost_per_unit: estimateCost(ingredientName),
                supplier: 'C·∫ßn c·∫≠p nh·∫≠t nh√† cung c·∫•p',
                min_stock_level: estimateMinStock(ingredientName),
                current_stock: 0
            });
            
            await inventory.save();
            console.log(`  ‚úÖ T·∫°o inventory: ${ingredientName}`);
            inventoryCreated = true;
        } else {
            console.log(`  ‚ö†Ô∏è  Inventory ƒë√£ t·ªìn t·∫°i: ${ingredientName}`);
        }
        
        // 3. T·∫°o recipe record
        const existingRecipe = await MenuItemRecipe.findOne({
            menu_item_id: menuItem._id,
            inventory_id: inventory._id
        });
        
        if (!existingRecipe) {
            const quantity = estimateQuantity(ingredientName, menuItem.name);
            const costPerServing = quantity * inventory.cost_per_unit;
            
            const recipe = new MenuItemRecipe({
                menu_item_id: menuItem._id,
                inventory_id: inventory._id,
                quantity_needed: quantity,
                unit: inventory.unit,
                cost_per_serving: costPerServing,
                is_main_ingredient: isMainIngredient(ingredientName, menuItem.ingredients)
            });
            
            await recipe.save();
            console.log(`  ‚úÖ T·∫°o recipe: ${quantity} ${inventory.unit} - ${costPerServing.toLocaleString()} VND`);
            recipeCreated = true;
        } else {
            console.log(`  ‚ö†Ô∏è  Recipe ƒë√£ t·ªìn t·∫°i: ${menuItem.name} - ${ingredientName}`);
        }
        
    } catch (error) {
        console.error(`  ‚ùå L·ªói x·ª≠ l√Ω ${ingredientName}:`, error.message);
        throw error;
    }
    
    return { inventoryCreated, recipeCreated };
}

// C·∫≠p nh·∫≠t cost cho menu items
async function updateMenuItemCosts() {
    console.log('\nüí∞ C·∫≠p nh·∫≠t chi ph√≠ m√≥n ƒÉn...');
    
    try {
        const menuItems = await MenuItem.find({});
        
        for (const menuItem of menuItems) {
            const recipes = await MenuItemRecipe.find({ menu_item_id: menuItem._id });
            const totalCost = recipes.reduce((sum, recipe) => sum + recipe.cost_per_serving, 0);
            const costPercentage = menuItem.price > 0 ? (totalCost / menuItem.price * 100) : 0;
            
            await MenuItem.findByIdAndUpdate(menuItem._id, {
                total_ingredient_cost: totalCost,
                food_cost_percentage: costPercentage,
                updated_at: new Date()
            });
            
            console.log(`  ‚úÖ ${menuItem.name}: ${totalCost.toLocaleString()} VND (${costPercentage.toFixed(1)}%)`);
        }
        
        console.log('üí∞ Ho√†n th√†nh c·∫≠p nh·∫≠t chi ph√≠!');
    } catch (error) {
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t chi ph√≠:', error);
    }
}

// Helper functions ƒë·ªÉ map d·ªØ li·ªáu
function mapCategory(ingredientName) {
    const name = ingredientName.toLowerCase();
    
    if (name.includes('th·ªãt') || name.includes('b√≤') || name.includes('heo') || 
        name.includes('l·ª£n') || name.includes('s∆∞·ªùn') || name.includes('b·∫Øp b√≤') ||
        name.includes('b√¨ heo')) {
        return 'th·ªãt';
    }
    if (name.includes('c√°') || name.includes('t√¥m') || name.includes('cua')) {
        return 'c√°';
    }
    if (name.includes('rau') || name.includes('h√†nh') || name.includes('c√† chua') ||
        name.includes('d∆∞a leo') || name.includes('x√† l√°ch') || name.includes('m·ªôc nhƒ©') ||
        name.includes('rau c·ªß') || name.includes('rau th∆°m') || name.includes('rau s·ªëng') ||
        name.includes('rau m√πi')) {
        return 'rau_c·ªß';
    }
    if (name.includes('mu·ªëi') || name.includes('ti√™u') || name.includes('n∆∞·ªõc m·∫Øm') ||
        name.includes('ƒë∆∞·ªùng') || name.includes('qu·∫ø') || name.includes('h·ªìi') ||
        name.includes('gi·∫•m') || name.includes('s·ªët') || name.includes('m·ª° h√†nh') ||
        name.includes('caramel')) {
        return 'gia_v·ªã';
    }
    if (name.includes('b√∫n') || name.includes('ph·ªü') || name.includes('mi·∫øn') ||
        name.includes('c∆°m') || name.includes('b√°nh') || name.includes('n·∫øp') ||
        name.includes('ƒë·∫≠u') || name.includes('th·∫°ch')) {
        return 'ƒë·ªì_kh√¥';
    }
    if (name.includes('mirinda') || name.includes('coca') || name.includes('tr√† s·ªØa') ||
        name.includes('s·ªØa') || name.includes('n∆∞·ªõc')) {
        return 'ƒë·ªì_u·ªëng';
    }
    
    return 'kh√°c';
}

function mapUnit(ingredientName) {
    const name = ingredientName.toLowerCase();
    
    if (name.includes('th·ªãt') || name.includes('c√°') || name.includes('b·∫Øp b√≤')) {
        return 'kg';
    }
    if (name.includes('rau') || name.includes('gia v·ªã') || name.includes('ƒë∆∞·ªùng') ||
        name.includes('mu·ªëi') || name.includes('ti√™u')) {
        return 'g';
    }
    if (name.includes('n∆∞·ªõc') || name.includes('s·ªØa')) {
        return 'ml';
    }
    if (name.includes('tr·ª©ng') || name.includes('h√†nh')) {
        return 'c√°i';
    }
    if (name.includes('b√∫n') || name.includes('ph·ªü') || name.includes('mi·∫øn')) {
        return 'g√≥i';
    }
    if (name.includes('mirinda') || name.includes('coca')) {
        return 'lon';
    }
    
    return 'g'; // default
}

function estimateCost(ingredientName) {
    const name = ingredientName.toLowerCase();
    
    // ∆Ø·ªõc t√≠nh gi√° theo VND/ƒë∆°n v·ªã
    if (name.includes('th·ªãt b√≤') || name.includes('b·∫Øp b√≤')) return 350000; // VND/kg
    if (name.includes('th·ªãt heo') || name.includes('th·ªãt l·ª£n')) return 180000; // VND/kg
    if (name.includes('s∆∞·ªùn')) return 250000; // VND/kg
    if (name.includes('c√°')) return 120000; // VND/kg
    if (name.includes('t√¥m')) return 300000; // VND/kg
    if (name.includes('cua')) return 200000; // VND/kg
    if (name.includes('tr·ª©ng')) return 4000; // VND/c√°i
    if (name.includes('rau') || name.includes('h√†nh')) return 30000; // VND/kg
    if (name.includes('b√∫n') || name.includes('ph·ªü')) return 25000; // VND/g√≥i
    if (name.includes('c∆°m')) return 20000; // VND/kg
    if (name.includes('mirinda') || name.includes('coca')) return 15000; // VND/lon
    if (name.includes('s·ªØa')) return 50000; // VND/l√≠t
    if (name.includes('ƒë∆∞·ªùng')) return 25000; // VND/kg
    if (name.includes('n∆∞·ªõc m·∫Øm')) return 80000; // VND/l√≠t
    
    return 20000; // default
}

function estimateQuantity(ingredientName, menuItemName) {
    const name = ingredientName.toLowerCase();
    const menuName = menuItemName.toLowerCase();
    
    // ∆Ø·ªõc t√≠nh s·ªë l∆∞·ª£ng c·∫ßn thi·∫øt cho 1 ph·∫ßn ƒÉn
    if (name.includes('th·ªãt') || name.includes('c√°')) {
        if (menuName.includes('ph·ªü') || menuName.includes('b√∫n')) return 0.15; // 150g
        if (menuName.includes('c∆°m')) return 0.2; // 200g
        return 0.1; // 100g default
    }
    
    if (name.includes('b√∫n') || name.includes('ph·ªü')) return 0.1; // 100g
    if (name.includes('c∆°m')) return 0.15; // 150g
    if (name.includes('rau') || name.includes('h√†nh')) return 0.03; // 30g
    if (name.includes('gia v·ªã') || name.includes('ƒë∆∞·ªùng')) return 0.005; // 5g
    if (name.includes('tr·ª©ng')) return 1; // 1 qu·∫£
    if (name.includes('mirinda') || name.includes('coca')) return 1; // 1 lon
    if (name.includes('s·ªØa')) return 0.1; // 100ml
    
    return 0.05; // 50g default
}

function estimateMinStock(ingredientName) {
    const name = ingredientName.toLowerCase();
    
    if (name.includes('th·ªãt') || name.includes('c√°')) return 5; // 5kg
    if (name.includes('rau')) return 2; // 2kg
    if (name.includes('b√∫n') || name.includes('ph·ªü')) return 10; // 10 g√≥i
    if (name.includes('gia v·ªã')) return 1; // 1kg
    if (name.includes('mirinda') || name.includes('coca')) return 20; // 20 lon
    
    return 5; // default
}

function isMainIngredient(ingredientName, allIngredients) {
    // Nguy√™n li·ªáu ƒë·∫ßu ti√™n th∆∞·ªùng l√† nguy√™n li·ªáu ch√≠nh
    const index = allIngredients.indexOf(ingredientName);
    return index === 0 || index === 1; // 2 nguy√™n li·ªáu ƒë·∫ßu
}

// Ch·∫°y migration
if (require.main === module) {
    migrateData();
}

module.exports = migrateData;
