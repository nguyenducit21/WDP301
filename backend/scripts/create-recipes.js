// scripts/create-recipes.js
require('dotenv').config();
const mongoose = require('mongoose');
const MenuItem = require('../models/menuItems.model');
const Inventory = require('../models/inventory.model');
const MenuItemRecipe = require('../models/menuItemRecipe.model');

// C√¥ng th·ª©c ƒë√£ ƒëi·ªÅu ch·ªânh ph√π h·ª£p v·ªõi nguy√™n li·ªáu c√≥ s·∫µn
const simpleRecipes = {
    "Ph·ªü b√≤": [
        { name: "Th·ªãt b√≤", quantity: 0.12, unit: "kg", is_main: true },
        { name: "B√°nh ph·ªü", quantity: 0.08, unit: "kg", is_main: true },
        { name: "H√†nh l√°", quantity: 0.02, unit: "kg", is_main: false },
        { name: "N∆∞·ªõc m·∫Øm", quantity: 0.015, unit: "l√≠t", is_main: false }
    ],
    
    "C∆°m t·∫•m s∆∞·ªõn b√¨": [
        { name: "S∆∞·ªùn heo", quantity: 0.2, unit: "kg", is_main: true },
        { name: "B√¨ heo", quantity: 0.05, unit: "kg", is_main: true },
        { name: "C∆°m", quantity: 0.15, unit: "kg", is_main: false },
        { name: "D∆∞a leo", quantity: 0.03, unit: "kg", is_main: false }
    ],
    
    "B√∫n ch·∫£": [
        { name: "Th·ªãt heo", quantity: 0.15, unit: "kg", is_main: true },
        { name: "B√∫n", quantity: 0.1, unit: "kg", is_main: true },
        { name: "Rau s·ªëng", quantity: 0.05, unit: "kg", is_main: false },
        { name: "N∆∞·ªõc m·∫Øm", quantity: 0.01, unit: "l√≠t", is_main: false }
    ],
    
    "Ch·∫£ gi√≤": [
        { name: "Th·ªãt heo", quantity: 0.1, unit: "kg", is_main: true },
        { name: "B√°nh tr√°ng", quantity: 0.05, unit: "kg", is_main: true },
        { name: "Rau s·ªëng", quantity: 0.03, unit: "kg", is_main: false }
    ],
    
    "G·ªèi b·∫Øp b√≤": [
        { name: "Th·ªãt b√≤", quantity: 0.15, unit: "kg", is_main: true }, // S·ª≠a t·ª´ "B·∫Øp b√≤" th√†nh "Th·ªãt b√≤"
        { name: "Rau th∆°m", quantity: 0.05, unit: "kg", is_main: true },
        { name: "C√† chua", quantity: 0.03, unit: "kg", is_main: false }, // S·ª≠a t·ª´ "H√†nh t√¢y"
        { name: "N∆∞·ªõc m·∫Øm", quantity: 0.01, unit: "l√≠t", is_main: false }
    ],
    
    "Tr√† s·ªØa ch√¢n tr√¢u": [
        { name: "ƒê∆∞·ªùng", quantity: 0.05, unit: "kg", is_main: true }, // ƒê∆°n gi·∫£n h√≥a
        { name: "D·∫ßu ƒÉn", quantity: 0.02, unit: "l√≠t", is_main: false } // Thay th·∫ø c√°c nguy√™n li·ªáu ph·ª©c t·∫°p
    ],
    
    "C√° kho t·ªô": [
        { name: "C√°", quantity: 0.25, unit: "kg", is_main: true },
        { name: "N∆∞·ªõc m·∫Øm", quantity: 0.02, unit: "l√≠t", is_main: false },
        { name: "ƒê∆∞·ªùng", quantity: 0.01, unit: "kg", is_main: false },
        { name: "C√† chua", quantity: 0.05, unit: "kg", is_main: false }
    ],
    
    "Salad c√° ng·ª´": [
        { name: "C√°", quantity: 0.12, unit: "kg", is_main: true },
        { name: "X√† l√°ch", quantity: 0.08, unit: "kg", is_main: true }, // S·ª≠a t·ª´ "Rau x√† l√°ch"
        { name: "C√† chua", quantity: 0.05, unit: "kg", is_main: false },
        { name: "D∆∞a leo", quantity: 0.03, unit: "kg", is_main: false }
    ],
    
    "S√∫p cua": [
        { name: "T√¥m", quantity: 0.1, unit: "kg", is_main: true }, // Thay "Cua" b·∫±ng "T√¥m"
        { name: "Tr·ª©ng", quantity: 1, unit: "c√°i", is_main: false },
        { name: "N∆∞·ªõc m·∫Øm", quantity: 0.01, unit: "l√≠t", is_main: false }
    ],
    
    "Ch√® ƒë·∫≠u xanh": [
        { name: "ƒê∆∞·ªùng", quantity: 0.08, unit: "kg", is_main: true }, // Thay "ƒê·∫≠u xanh" b·∫±ng "ƒê∆∞·ªùng"
        { name: "D·∫ßu ƒÉn", quantity: 0.02, unit: "l√≠t", is_main: false } // ƒê∆°n gi·∫£n h√≥a
    ],
    
    "S·ªØa chua n·∫øp c·∫©m": [
        { name: "ƒê∆∞·ªùng", quantity: 0.15, unit: "kg", is_main: true }, // ƒê∆°n gi·∫£n h√≥a
        { name: "D·∫ßu ƒÉn", quantity: 0.05, unit: "l√≠t", is_main: false }
    ],
    
    "C∆°m ch√°y": [
        { name: "C∆°m", quantity: 0.1, unit: "kg", is_main: true },
        { name: "D·∫ßu ƒÉn", quantity: 0.02, unit: "l√≠t", is_main: false },
        { name: "Mu·ªëi", quantity: 0.005, unit: "kg", is_main: false }
    ],
    
    "Mirinda": [
        { name: "Mirinda", quantity: 1, unit: "c√°i", is_main: true }
    ]
};

async function createRecipes() {
    await mongoose.connect(process.env.MONGODB_URI);
    
    try {
        console.log('üçΩÔ∏è  T·∫°o c√¥ng th·ª©c m√≥n ƒÉn...');
        
        // X√≥a t·∫•t c·∫£ recipes c≈©
        await MenuItemRecipe.deleteMany({});
        console.log('üóëÔ∏è  ƒê√£ x√≥a recipes c≈©');
        
        let recipesCreated = 0;
        let menuItemsUpdated = 0;
        
        for (const [dishName, ingredients] of Object.entries(simpleRecipes)) {
            console.log(`\nüçΩÔ∏è  X·ª≠ l√Ω m√≥n: ${dishName}`);
            
            // T√¨m menu item (t√¨m ki·∫øm linh ho·∫°t)
            const menuItem = await MenuItem.findOne({ 
                name: { $regex: new RegExp(dishName, 'i') } 
            });
            
            if (!menuItem) {
                console.log(`‚ùå Kh√¥ng t√¨m th·∫•y m√≥n: ${dishName}`);
                continue;
            }
            
            let totalCost = 0;
            let hasValidIngredients = false;
            
            for (const ingredient of ingredients) {
                // T√¨m inventory (t√¨m ki·∫øm linh ho·∫°t)
                const inventory = await Inventory.findOne({ 
                    name: { $regex: new RegExp(`^${ingredient.name}$`, 'i') } 
                });
                
                if (!inventory) {
                    console.log(`  ‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y nguy√™n li·ªáu: ${ingredient.name}`);
                    continue;
                }
                
                // T·∫°o recipe
                const costPerServing = ingredient.quantity * inventory.cost_per_unit;
                totalCost += costPerServing;
                hasValidIngredients = true;
                
                const recipe = new MenuItemRecipe({
                    menu_item_id: menuItem._id,
                    inventory_id: inventory._id,
                    quantity_needed: ingredient.quantity,
                    unit: ingredient.unit,
                    cost_per_serving: costPerServing,
                    is_main_ingredient: ingredient.is_main
                });
                
                await recipe.save();
                console.log(`    ‚úÖ ${ingredient.name}: ${ingredient.quantity} ${ingredient.unit} - ${costPerServing.toLocaleString()} VND`);
                recipesCreated++;
            }
            
            // C·∫≠p nh·∫≠t menu item cost n·∫øu c√≥ nguy√™n li·ªáu h·ª£p l·ªá
            if (hasValidIngredients) {
                const foodCostPercentage = menuItem.price > 0 ? (totalCost / menuItem.price * 100) : 0;
                
                await MenuItem.findByIdAndUpdate(menuItem._id, {
                    total_ingredient_cost: Math.round(totalCost),
                    food_cost_percentage: Math.round(foodCostPercentage * 10) / 10,
                    updated_at: new Date()
                });
                
                console.log(`  üí∞ T·ªïng chi ph√≠: ${totalCost.toLocaleString()} VND (${foodCostPercentage.toFixed(1)}%)`);
                menuItemsUpdated++;
            }
        }
        
        console.log('\nüéâ Ho√†n th√†nh t·∫°o c√¥ng th·ª©c!');
        console.log(`üìã T·∫°o ${recipesCreated} recipe records`);
        console.log(`üçΩÔ∏è  C·∫≠p nh·∫≠t ${menuItemsUpdated} m√≥n ƒÉn`);
        
        // Hi·ªÉn th·ªã summary
        console.log('\nüìä T√≥m t·∫Øt:');
        const totalRecipes = await MenuItemRecipe.countDocuments();
        const itemsWithRecipes = await MenuItem.countDocuments({ total_ingredient_cost: { $gt: 0 } });
        console.log(`   - T·ªïng recipes: ${totalRecipes}`);
        console.log(`   - M√≥n c√≥ c√¥ng th·ª©c: ${itemsWithRecipes}`);
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    } finally {
        await mongoose.connection.close();
        process.exit(0);
    }
}

// Ch·∫°y script
if (require.main === module) {
    createRecipes();
}

module.exports = createRecipes;
