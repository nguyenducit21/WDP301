const Inventory = require('../models/inventory.model');
const Order = require('../models/order.model');
const Reservation = require('../models/reservation.model');
const MenuItemRecipe = require('../models/menuItemRecipe.model');
const ImportReceipt = require('../models/importReceipt.model');

const STORAGE_TYPE_CONFIG = {
  "perishable": { label: "T∆∞∆°i s·ªëng", days: 2, buffer: 0.15 },
  "semi-perishable": { label: "B√°n t∆∞∆°i", days: 4, buffer: 0.10 },
  "dry": { label: "Kh√¥/ƒë√¥ng l·∫°nh", days: 7, buffer: 0.10 }
};

const getInventoryAnalytics = async (req, res) => {
  try {
    let { days = 14 } = req.query;
    days = parseInt(days) || 14;
    const end = new Date();
    const start = new Date(end.getTime() - days * 24 * 60 * 60 * 1000);


    // L·∫•y to√†n b·ªô inventory
    const inventories = await Inventory.find({ isactive: true }).lean();

    // Ph√¢n t√≠ch t·ª´ng nguy√™n li·ªáu
    const data = await Promise.all(
      inventories.map(async (inv) => {
        // 1. T√≠nh to√°n ti√™u th·ª• th·ª±c t·∫ø
        const { total, average, history } = await calculateConsumption(inv._id, start, end, days);

        // 2. L·∫•y config l∆∞u tr·ªØ
        const conf = STORAGE_TYPE_CONFIG[inv.storageType] || STORAGE_TYPE_CONFIG['dry'];
        const usedForDays = conf.days;
        const buffer = conf.buffer;

        // 3. T√≠nh l∆∞·ª£ng nh·∫≠p ƒë·ªÅ xu·∫•t
        const suggest = Math.max(0, Math.ceil(average * usedForDays * (1 + buffer) - (inv.currentstock || 0)));

        // 4. C·∫£nh b√°o
        let warning = "";
        if (suggest > average * usedForDays * 2) {
          warning = "‚ö†Ô∏è L∆∞·ª£ng nh·∫≠p v∆∞·ª£t qu√° b√¨nh th∆∞·ªùng, h√£y ki·ªÉm tra l·∫°i!";
        }
        if ((inv.currentstock || 0) < (inv.minstocklevel || 0)) {
          warning += " üõë T·ªìn kho d∆∞·ªõi m·ª©c t·ªëi thi·ªÉu!";
        }

        // 5. C√¥ng th·ª©c
        const formula = `(${average.toFixed(2)} √ó ${usedForDays}) √ó ${(1 + buffer)} - ${inv.currentstock}`;
        const description = `ƒê·ªß d√πng cho ${usedForDays} ng√†y (${conf.label}), d·ª± ph√≤ng ${Math.round(buffer * 100)}%.`;

        // 6. Ng√†y nh·∫≠p g·∫ßn nh·∫•t
        const lastImport = await ImportReceipt.findOne({ "items.inventory_id": inv._id })
          .sort({ created_at: -1 })
          .select('created_at');
        const lastImportDate = lastImport && lastImport.created_at
          ? lastImport.created_at.toLocaleDateString()
          : "--";

        return {
          id: inv._id,
          name: inv.name,
          unit: inv.unit,
          storageType: conf.label,
          currentStock: inv.currentstock || 0,
          minStockLevel: inv.minstocklevel || 0,
          avgDailyUsed: average,
          totalUsed: total,
          neededForDays: Math.ceil(average * usedForDays),
          suggestImport: suggest,
          usedForDays,
          buffer,
          formula,
          description,
          warning,
          lastImportDate,
          history
        };
      })
    );

    res.json({ success: true, data, period: { from: start, to: end, days } });
  } catch (error) {
    console.error('getInventoryAnalytics error:', error);
    res.status(500).json({ success: false, message: 'L·ªói khi l·∫•y d·ªØ li·ªáu dashboard', error: error.message });
  }
};

// H√†m t√≠nh to√°n ti√™u th·ª• nguy√™n li·ªáu t·ª´ Reservation v√† Order
async function calculateConsumption(inventoryId, start, end, days) {
  try {

    // Chu·∫©n h√≥a start v√† end ƒë·ªÉ so s√°nh ng√†y
    const startDate = new Date(start);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date(end);
    endDate.setHours(23, 59, 59, 999);

    // 1. L·∫•y to√†n b·ªô Reservation ƒë√£ ho√†n th√†nh
    const reservations = await Reservation.find({
      date: { $gte: startDate, $lte: endDate },
      status: 'completed'
    })
      .populate('pre_order_items.menu_item_id', 'name')
      .lean();

    // 2. L·∫•y to√†n b·ªô Order ƒë√£ ho√†n th√†nh ho·∫∑c ƒë√£ ph·ª•c v·ª•
    const orders = await Order.find({
      created_at: { $gte: startDate, $lte: endDate },
      status: { $in: ['completed', 'served'] }
    })
      .populate('order_items.menu_item_id', 'name')
      .lean();


    // 3. T·∫°o map ƒë·ªÉ l∆∞u s·ªë l∆∞·ª£ng menu item theo ng√†y
    const menuItemDateQuantity = {};

    // X·ª≠ l√Ω t·ª´ Reservation (pre_order_items)
    for (const reservation of reservations) {
      const dateStr = new Date(reservation.date).toISOString().split('T')[0];
      for (const item of reservation.pre_order_items || []) {
        if (!item.menu_item_id || !item.quantity) {
          continue;
        }
        const key = `${item.menu_item_id._id}_${dateStr}`;
        menuItemDateQuantity[key] = (menuItemDateQuantity[key] || 0) + item.quantity;
      }
    }

    // X·ª≠ l√Ω t·ª´ Order (order_items)
    for (const order of orders) {
      const dateStr = new Date(order.created_at).toISOString().split('T')[0];
      for (const item of order.order_items || []) {
        if (!item.menu_item_id || !item.quantity) {
          continue;
        }
        const key = `${item.menu_item_id._id}_${dateStr}`;
        menuItemDateQuantity[key] = (menuItemDateQuantity[key] || 0) + item.quantity;
      }
    }

    // 4. L·∫•y c√¥ng th·ª©c c·ªßa c√°c m√≥n ƒÉn s·ª≠ d·ª•ng nguy√™n li·ªáu n√†y
    const recipes = await MenuItemRecipe.find({ "ingredients.inventory_id": inventoryId })
      .populate('menu_item_id', 'name')
      .lean();


    // 5. T√≠nh ti√™u th·ª• nguy√™n li·ªáu theo ng√†y
    const dateMap = {};
    for (const recipe of recipes) {
      const ingredient = recipe.ingredients.find(ing => ing.inventory_id.toString() === inventoryId.toString());
      if (!ingredient) {
        continue;
      }

      for (let d = 0; d <= days; d++) {
        const dateObj = new Date(startDate.getTime() + d * 24 * 60 * 60 * 1000);
        if (dateObj > endDate) break;
        const dateStr = dateObj.toISOString().split('T')[0];
        const key = `${recipe.menu_item_id?._id}_${dateStr}`;
        const menuQty = menuItemDateQuantity[key] || 0;
        const quantityUsed = menuQty * (ingredient.quantity_needed || 0);

        if (!dateMap[dateStr]) dateMap[dateStr] = 0;
        dateMap[dateStr] += quantityUsed;
        if (quantityUsed > 0) {
        }
      }
    }


    // 6. T√≠nh t·ªïng v√† trung b√¨nh ti√™u th·ª•
    const history = [];
    let total = 0;
    let count = 0;
    for (let d = 0; d <= days; d++) {
      const dateObj = new Date(startDate.getTime() + d * 24 * 60 * 60 * 1000);
      if (dateObj > endDate) break;
      const dateStr = dateObj.toISOString().split('T')[0];
      const qty = dateMap[dateStr] || 0;
      history.push(qty);
      total += qty;
      if (qty > 0) count++;
    }
    const average = count > 0 ? total / count : 0;


    return {
      total,
      average,
      history
    };
  } catch (error) {
    return { total: 0, average: 0, history: [] };
  }
}

module.exports = { getInventoryAnalytics };